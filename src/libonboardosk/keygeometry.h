#ifndef KEYGEOMETRY_H
#define KEYGEOMETRY_H

#include <memory>

#include "keypath.h"

// Full description of a key's shape.
// Path variants for a given key_size are generated by path
// interpolation. This allows for key_size dependent shape changes,
// controlled solely by an SVG layout file. See 'Return' key in
// 'Full Keyboard' layout for an example.
class KeyGeometry
{
    public:
        using Ptr = std::shared_ptr<KeyGeometry>;

        static Ptr from_paths(const std::vector<KeyPath::Ptr>& paths);
        static Ptr from_rect(const Rect& rect);

        // Everything in logical coordinates
        // size path0 = 1.0, size path1 = 0.5
        KeyPath::Ptr get_transformed_path(const Offset& offset={0.0, 0.0},
                                          const Size& size={1.0, 1.0});

        KeyPath::Ptr& get_full_size_path();

        // Bounding box at size 1.0.
        Rect get_full_size_bounds();

        // Bounding box at size 0.5.
        Rect get_half_size_bounds();

        // Scale from logical distances to key size.
        Size scale_log_to_size(const Size& sz);

    public:
        KeyPath::Ptr m_path0;          // KeyPath at 100% size
        KeyPath::Ptr m_path1;          // KepPath at 50% size, optional
};

#endif // KEYGEOMETRY_H
